{
    "version": 3,
    "file": "../checkout-validation-143.min.js",
    "sources": [
        "checkout-validation-143.js"
    ],
    "sourcesContent": [
        "/**\r\n * Manage checkout front-end validation.\r\n *\r\n * DEPENDS ON:\r\n * - jQuery // Interact with WooCommerce events\r\n */\r\n\r\n(function (root, factory) {\r\n\tif ( typeof define === 'function' && define.amd ) {\r\n\t\tdefine([], factory(root));\r\n\t} else if ( typeof exports === 'object' ) {\r\n\t\tmodule.exports = factory(root);\r\n\t} else {\r\n\t\troot.CheckoutValidation = factory(root);\r\n\t}\r\n})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\r\n\r\n\t'use strict';\r\n\r\n\tvar $ = jQuery;\r\n\r\n\tvar _hasInitialized = false;\r\n\tvar _hasJQuery = ( $ != null );\r\n\tvar _publicMethods = { };\r\n\tvar _validationTypes = {};\r\n\tvar _settings = {\r\n\t\tbodyClass: 'sc-checkout-validation--active',\r\n\t\tformSelector: 'form.checkout',\r\n\t\tformRowSelector: '.form-row',\r\n\t\tvalidateFieldsSelector: '.input-text, select',\r\n\t\tclearValidationCountryChangedSelector: '#state, #shipping_state, #billing_state',\r\n\t\talwaysValidateFieldsSelector: '',\r\n\t\tselect2Selector: '.select2, .select2-hidden-accessible',\r\n\t\ttypeRequiredSelector: '.validate-required',\r\n\t\ttypeEmailSelector: '.validate-email',\r\n\t\ttypeConfirmationSelector: '[data-confirm-with]',\r\n\t\tvalidClass: 'woocommerce-validated',\r\n\t\tinvalidClass: 'woocommerce-invalid',\r\n\t\tvalidationMessages: {\r\n\t\t\trequired:         'This is a required field.',\r\n\t\t\temail:            'This is not a valid email address.',\r\n\t\t\tconfirmation:     'This field does not match the related',\r\n\t\t},\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * METHODS\r\n\t */\r\n\r\n\r\n\r\n\t/*!\r\n\t* Merge two or more objects together.\r\n\t* (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com\r\n\t* @param   {Boolean}  deep     If true, do a deep (or recursive) merge [optional]\r\n\t* @param   {Object}   objects  The objects to merge together\r\n\t* @returns {Object}            Merged values of defaults and options\r\n\t*/\r\n\tvar extend = function () {\r\n\t\t// Variables\r\n\t\tvar extended = {};\r\n\t\tvar deep = false;\r\n\t\tvar i = 0;\r\n\r\n\t\t// Check if a deep merge\r\n\t\tif ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {\r\n\t\t\tdeep = arguments[0];\r\n\t\t\ti++;\r\n\t\t}\r\n\r\n\t\t// Merge the object into the extended object\r\n\t\tvar merge = function (obj) {\r\n\t\t\tfor (var prop in obj) {\r\n\t\t\t\tif (obj.hasOwnProperty(prop)) {\r\n\t\t\t\t\t// If property is an object, merge properties\r\n\t\t\t\t\tif (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\r\n\t\t\t\t\t\textended[prop] = extend(extended[prop], obj[prop]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\textended[prop] = obj[prop];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Loop through each object and conduct a merge\r\n\t\tfor (; i < arguments.length; i++) {\r\n\t\t\tvar obj = arguments[i];\r\n\t\t\tmerge(obj);\r\n\t\t}\r\n\r\n\t\treturn extended;\r\n    };\r\n\t\r\n\r\n\r\n\t/**\r\n\t * Check if field is hidden to the user.\r\n\t * @param  {Field}  field Field to test visibility.\r\n\t * @return {Boolean}      True if field is hidden to the user.\r\n\t */\r\n\tvar isFieldHidden = function( field ) {\r\n\t\treturn ( field.offsetParent === null );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if field is in allow list for always validate.\r\n\t * @param  {Field}  field  Field to test for allow list.\r\n\t * @return {Boolean}       True if field is in allow list for always validate.\r\n\t */\r\n\tvar isAlwaysValidate = function( field ) {\r\n\t\t// Bail if field not found or selector empty\r\n\t\tif ( ! field || ! _settings.alwaysValidateFieldsSelector ) { return false; }\r\n\r\n\t\t// Check if field is in allow list\r\n\t\tif ( field.matches( _settings.alwaysValidateFieldsSelector ) ) { return true; }\r\n\t\treturn false;\r\n\t};\r\n\r\n\t\r\n\r\n\t/**\r\n\t * Get the form-row element related to the field.\r\n\t * @param  {Field} field Form field.\r\n\t * @return {Element}     Form row related to the passed field.\r\n\t */\r\n\tvar getFormRow = function( field ) {\r\n\t\t// Bail if field not valid\r\n\t\tif ( !field ) { return; }\r\n\r\n\t\treturn field.closest( _settings.formRowSelector );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Add markup for inline message of required fields.\r\n\t * @param  {Field}   field         Field to validate.\r\n\t * @param  {Element} formRow       Form row related to the field.\r\n\t * @param  {String}  message       Message to add.\r\n\t * @param  {String}  invalidClass  Type of error used to identify which message is related to which error.\r\n\t */\r\n\tvar addInlineMessage = function( field, formRow, message, invalidClass ) {\r\n\t\t// Bail if field not valid\r\n\t\tif ( ! field ) { return; }\r\n\r\n\t\t// Bail if message is empty\r\n\t\tif ( ! message || message.length == 0 ) { return; }\r\n\r\n\t\tvar referenceNode = field;\r\n\r\n\t\t// Change reference field for select2\r\n\t\tif ( isSelect2Field( field ) ) {\r\n\t\t\tvar newReference = field.parentNode.querySelector( '.select2-container' );\r\n\t\t\tif ( newReference ) { referenceNode = newReference; }\r\n\t\t}\r\n\r\n\t\t// Create message element and add it after the field.\r\n\t\tvar parent = field.parentNode;\r\n\t\tvar element = document.createElement( 'span' );\r\n\t\telement.className = 'woocommerce-error invalid-' + invalidClass;\r\n\t\telement.innerText = message;\r\n\t\tparent.insertBefore( element, referenceNode.nextSibling );\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * Remove inline message from the field.\r\n\t * @param  {Field} field      Field to validate.\r\n\t * @param  {Element} formRow  Form row related to the field.\r\n\t * @param  {String}  invalidClass  Type of error used to identify which message is related to which error.\r\n\t */\r\n\tvar removeInlineMessage = function( field, formRow, invalidClass ) {\r\n\t\tvar messageElements = formRow.querySelectorAll( 'span.woocommerce-error.invalid-' + invalidClass );\r\n\t\tfor ( var i = 0; i < messageElements.length; i++ ) {\r\n\t\t\tmessageElements[ i ].parentNode.removeChild( messageElements[ i ] );\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\r\n\t/**\r\n\t * Check field is a select2 element.\r\n\t * @param  {Field}  field     Field to check.\r\n\t * @return {Boolean}          True if field is select2.\r\n\t */\r\n\tvar isSelect2Field = function( field ) {\r\n\t\tif ( field.closest( _settings.select2Selector ) ) { return true; }\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if field is a select field.\r\n\t * @param  {Element}  field  Field to check.\r\n\t * @return {Boolean}         True if is a select field.\r\n\t */\r\n\tvar isSelectField = function( field ) {\r\n\t\tif ( field.matches( 'select' ) ) { return true; }\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if field has value.\r\n\t * @param  {Field}   field  Field to check.\r\n\t * @return {Boolean}        True if field has value.\r\n\t */\r\n\t_publicMethods.hasValue = function( field ) {\r\n\t\t// Check for select 2 field\r\n\t\tif ( isSelectField( field ) ) {\r\n\t\t\tif ( field.options && field.selectedIndex > -1 && field.options[ field.selectedIndex ].value != '' ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check for all other fields\r\n\t\tif ( field.value != '' ) { return true; }\r\n\t\t\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if form row is required.\r\n\t * @param  {Field}    field Field for validation.\r\n\t * @param  {Element}  formRow Form row element.\r\n\t * @return {Boolean}          True if required.\r\n\t */\r\n\tvar isRequiredField = function( field, formRow ) {\r\n\t\tif ( ! formRow.matches( _settings.typeRequiredSelector ) ) { return false; }\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Validate required field.\r\n\t * @param  {Field}    field Field for validation.\r\n\t * @param  {Element}  formRow Form row element.\r\n\t */\r\n\tvar validateRequired = function( field, formRow ) {\r\n\t\t// Bail if field does not have a value\r\n\t\tif ( ! _publicMethods.hasValue( field ) ) { return { valid: false, message: _settings.validationMessages.required }; }\r\n\r\n\t\treturn { valid: true };\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if form row is email field.\r\n\t * @param  {Field}    field Field for validation.\r\n\t * @param  {Element}  formRow Form row element.\r\n\t * @return {Boolean}          True if is email field.\r\n\t */\r\n\tvar isEmailField = function( field, formRow ) {\r\n\t\tif ( ! formRow.matches( _settings.typeEmailSelector ) ) { return false; }\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Validate email field.\r\n\t * @param  {Field}    field Field for validation.\r\n\t * @param  {Element}  formRow Form row element.\r\n\t */\r\n\tvar validateEmail = function( field, formRow ) {\r\n\t\t// Bail if does not have value\r\n\t\tif ( ! _publicMethods.hasValue( field ) ) { return { valid: false }; }\r\n\r\n\t\t/* https://stackoverflow.com/questions/2855865/jquery-validate-e-mail-address-regex */\r\n\t\tvar emailPattern = new RegExp(/^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i);\r\n\r\n\t\t// Validate email value\r\n\t\tif ( ! emailPattern.test( field.value ) ) { return { valid: false, message: _settings.validationMessages.email }; }\r\n\r\n\t\treturn { valid: true };\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if form row is a confirmation field.\r\n\t * @param  {Field}    field Field for validation.\r\n\t * @param  {Element}  formRow Form row element.\r\n\t * @return {Boolean}          True if is a confimation field.\r\n\t */\r\n\tvar isConfirmationField = function( field, formRow ) {\r\n\t\tif ( ! formRow.querySelector( _settings.typeConfirmationSelector ) ) { return false; }\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Validate confirmation field.\r\n\t * @param  {Field}    field Field for validation.\r\n\t * @param  {Element}  formRow Form row element.\r\n\t */\r\n\tvar validateConfirmation = function( field, formRow ) {\r\n\t\t// Bail if does not have value\r\n\t\tif ( ! _publicMethods.hasValue( field ) ) { return { valid: false }; }\r\n\r\n\t\t// Get confirmation field\r\n\t\tvar form = formRow.closest( 'form' );\r\n\t\tvar confirmWith = form ? form.querySelector( field.getAttribute( 'data-confirm-with' ) ) : null;\r\n\r\n\t\t// Validate fields have same value\r\n\t\tif ( confirmWith && field.value == confirmWith.value ) { return { valid: false, message: _settings.validationMessages.confirmation }; }\r\n\r\n\t\treturn { valid: true };\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Check if field needs validation.\r\n\t * @param  {Field} field      Field to validate.\r\n\t * @param  {Element} formRow  Form row for validation.\r\n\t * @return {Boolean}          True if field needs any validation.\r\n\t */\r\n\tvar needsValidation = function( field, formRow ) {\r\n\t\t// Bail if field should always validate\r\n\t\tif ( isAlwaysValidate( field ) ) { return true; }\r\n\r\n\t\t// Test if field needs validation from any validation type\r\n\t\tvar validationTypeNames = Object.getOwnPropertyNames( _validationTypes );\r\n\t\tfor ( var i = 0; i < validationTypeNames.length; i++) {\r\n\t\t\tvar validationTypeName = validationTypeNames[i];\r\n\t\t\tvar validationType = _validationTypes[ validationTypeName ];\r\n\t\t\tif ( validationType.needsValidation( field, formRow ) ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Process validation results of a field.\r\n\t * @param  {Field} field             Field to validation.\r\n\t * @param  {Element} formRow          Form row element.\r\n\t * @param  {Array} validationResults Validation results array.\r\n\t * @return {Boolean}           True if all fields are valid.\r\n\t */\r\n\tvar processValidationResults = function( field, formRow, validationResults ) {\r\n\t\tvar valid = true;\r\n\r\n\t\t// Iterate validation results\r\n\t\tvar validationResultsNames = Object.getOwnPropertyNames( validationResults );\r\n\t\tfor ( var i = 0; i < validationResultsNames.length; i++ ) {\r\n\t\t\tvar validationTypeName = validationResultsNames[ i ];\r\n\t\t\tvar validationType = _validationTypes[ validationTypeName ];\r\n\t\t\tvar result = validationResults[ validationTypeName ].valid;\r\n\t\t\tvar message = validationResults[ validationTypeName ].message;\r\n\t\t\tvar invalidClass = validationType.invalidClass;\r\n\r\n\t\t\t// Remove messages for the current validation type\r\n\t\t\tremoveInlineMessage( field, formRow, invalidClass );\r\n\r\n\t\t\t// Toggle validation `invalidClass` according to validation `result`\r\n\t\t\tformRow.classList.toggle( _settings.invalidClass +'-'+ validationType.invalidClass, true !== result );\r\n\r\n\t\t\t// Maybe set field as invalid\r\n\t\t\tif ( true !== result ) {\r\n\t\t\t\tvalid = false;\r\n\t\t\t\taddInlineMessage( field, formRow, message, invalidClass );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Toggle general field valid/invalid classes\r\n\t\tformRow.classList.toggle( _settings.validClass, valid );\r\n\t\tformRow.classList.toggle( _settings.invalidClass, !valid );\r\n\r\n\t\treturn valid;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Clear the state fields validation status classes when the field loses the value due changes to the country fields.\r\n\t *\r\n\t * @param   jQuery.Event  event    Event object as a `jQuery.Event`.\r\n\t * @param   string        country  Selected country code value of the related country field.\r\n\t * @param   jQuery.fn     wrapper  jQuery object representing the field wrapper element related to the country field that was changed. See variable `wrapper_selectors` ~LN103 of the `country-select.js`.\r\n\t */\r\n\tvar maybeClearStateFields = function( event, country, wrapper ) {\r\n\t\t// Bail if jQuery is not available\r\n\t\tif ( ! _hasJQuery ) { return; }\r\n\t\t\r\n\t\tvar wrappersList = $( wrapper ).toArray();\r\n\r\n\t\twrappersList.forEach( function( wrapperItem ) {\r\n\t\t\t\r\n\t\t\tvar fields = Array.from( wrapperItem.querySelectorAll( _settings.clearValidationCountryChangedSelector ) );\r\n\t\t\t\r\n\t\t\tfields.forEach( function( field ) {\r\n\t\t\t\t\r\n\t\t\t\tif ( '' == field.value ) {\r\n\t\t\t\t\tvar formRow = field.closest( _settings.formRowSelector );\r\n\t\t\t\t\t_publicMethods.clearValidationResults( field, formRow );\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Handle document clicks and route to the appropriate function.\r\n\t */\r\n\tvar handleValidateEvent = function( e ) {\r\n\t\tvar field = e.target;\r\n\r\n\t\t// Get correct field when is select2\r\n\t\tif ( isSelect2Field( e.target ) ) {\r\n\t\t\tfield = e.target.closest( _settings.formRowSelector ).querySelector( 'select' );\r\n\t\t}\r\n\r\n\t\t_publicMethods.validateField( field );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Register validation types.\r\n\t */\r\n\tvar registerValidationTypes = function() {\r\n\t\t_publicMethods.registerValidationType( 'required', 'required-field', isRequiredField, validateRequired );\r\n\t\t_publicMethods.registerValidationType( 'email', 'email', isEmailField, validateEmail );\r\n\t\t_publicMethods.registerValidationType( 'confirmation', 'confirmation-field', isConfirmationField, validateConfirmation );\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Clear validation results status of a field.\r\n\t * @param  {Field} field             Field to validation.\r\n\t * @param  {Element} formRow          Form row element.\r\n\t */\r\n\t _publicMethods.clearValidationResults = function( field, formRow ) {\r\n\t\t// Bail if field or form row invalid\r\n\t\tif ( ! field || ! formRow ) { return; }\r\n\t\t\r\n\t\t// Remove invalid classes for validation types\r\n\t\tvar validationTypeKeys = Object.keys( _validationTypes );\r\n\t\tfor ( var i = 0; i < validationTypeKeys.length; i++ ) {\r\n\t\t\tvar type = validationTypeKeys[i];\r\n\t\t\tformRow.classList.remove( _settings.invalidClass +'-'+ type );\r\n\t\t}\r\n\r\n\t\t// Remove valid/invalid classes\r\n\t\tformRow.classList.remove( _settings.validClass );\r\n\t\tformRow.classList.remove( _settings.invalidClass );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Test multiple validations on the passed field.\r\n\t * @param  {Field} field    Field for validation.\r\n\t * @return {Boolean}        True if field is valid.\r\n\t */\r\n\t_publicMethods.validateField = function( field, validateHidden ) {\r\n\t\t// Bail if field is null\r\n\t\tif ( ! field ) { return true; }\r\n\r\n\t\tvar validationResults = {},\r\n\t\t\tformRow = getFormRow( field );\r\n\r\n\t\t// Bail if formRow not found\r\n\t\tif ( ! formRow ) { return true; }\r\n\r\n\t\t// Bail if hidden to the user\r\n\t\tif ( ! isAlwaysValidate( field ) && validateHidden !== true && isFieldHidden( field ) ) { return true; }\r\n\r\n\t\t// Bail if field doesn't need validation\r\n\t\tif ( ! needsValidation( field, formRow ) ) { return true; }\r\n\r\n\t\t// Execute validate field for all applicable validation types\r\n\t\tvar validationTypeNames = Object.getOwnPropertyNames( _validationTypes );\r\n\t\tfor ( var i = 0; i < validationTypeNames.length; i++) {\r\n\t\t\tvar validationTypeName = validationTypeNames[i];\r\n\t\t\tvar validationType = _validationTypes[ validationTypeName ];\r\n\t\t\tif ( validationType.needsValidation( field, formRow ) ) {\r\n\t\t\t\tvalidationResults[ validationTypeName ] = validationType.validate( field, formRow );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO: Maybe trigger validation of related fields (ie zip > State, Country)\r\n\r\n\t\t// Process results\r\n\t\treturn processValidationResults( field, formRow, validationResults );\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Trigger validation in all fields inside the container.\r\n\t * @param  {Element} container Element to look for fields in, if not passed consider the checkout form as container.\r\n\t * @return {Boolean}           True if all fields are valid.\r\n\t */\r\n\t_publicMethods.validateAllFields = function( container, validateHidden ) {\r\n\t\tif ( ! container ) { container = document.querySelector( _settings.formSelector ) }\r\n\r\n\t\tvar all_valid = true;\r\n\t\tvar fields = container.querySelectorAll( _settings.validateFieldsSelector );\r\n\r\n\t\tfor ( var i = 0; i < fields.length; i++ ) {\r\n\t\t\tif ( ! _publicMethods.validateField( fields[i], validateHidden ) ) {\r\n\t\t\t\tall_valid = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn all_valid;\r\n\t};\r\n\r\n\r\n\r\n\t/**\r\n\t * Register a new validation type.\r\n\t *\r\n\t * @param   String    validationType      A `snake_case` string representing the type of validation. Used as the validation type property on the `_validationTypes` object.\r\n\t * @param   String    invalidClass        CSS class to be used on the `form-row` related to the field when the validation fails.\r\n\t * @param   Function  fnNeedsValidation   A function to check if the field needs validation, should return `true` when the field needs validation.\r\n\t * @param   Function  fnValidate          A function to validate the form field, should accept 2 parameters being `field` and `formRow`, both expected to be an HTMLElement.\r\n\t *\r\n\t * @return  Boolean                  `true` when the registration of the validation type has been successful, `false` otherwise.\r\n\t */\r\n\t_publicMethods.registerValidationType = function( validationType, invalidClass, fnNeedsValidation, fnValidate ) {\r\n\t\t// Bail if _validationTypes not initialized\r\n\t\tif ( ! _validationTypes ) { return false; }\r\n\r\n\t\t// Bail if validationType or invalidClass not a string\r\n\t\tif ( typeof validationType !== 'string' || typeof invalidClass !== 'string' ) { return false; }\r\n\r\n\t\t// Bail if fnNeedsValidation or fnValidate are not functions\r\n\t\tif ( ! ( fnNeedsValidation instanceof Function ) || ! ( fnValidate instanceof Function ) ) { return false; }\r\n\t\t\r\n\t\t// Bail if validation type already registered\r\n\t\tif ( _validationTypes.hasOwnProperty( validationType ) ) {\r\n\t\t\tconsole.log( 'Validation type \"' + validationType + '\" already registered.' );\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Register validation type\r\n\t\t_validationTypes[ validationType ] = {\r\n\t\t\tinvalidClass: invalidClass,\r\n\t\t\tneedsValidation: fnNeedsValidation,\r\n\t\t\tvalidate: fnValidate,\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Return the registered validation types.\r\n\t *\r\n\t * @return  Object  Object with the registered validation types as properties.\r\n\t */\r\n\t_publicMethods.getValidationTypes = function() {\r\n\t\treturn _validationTypes;\r\n\t}\r\n\r\n\t\r\n\r\n\t/**\r\n\t * Initialize component and set related handlers.\r\n\t */\r\n\t_publicMethods.init = function( options ) {\r\n\t\tif ( _hasInitialized ) return;\r\n\r\n\t\t// Merge settings\r\n\t\t_settings = extend( _settings, options );\r\n\r\n\t\t// Register validation types\r\n\t\tregisterValidationTypes();\r\n\r\n\t\tif ( _hasJQuery ) {\r\n\t\t\t$( _settings.formSelector ).on( 'input validate change', _settings.validateFieldsSelector, handleValidateEvent );\r\n\t\t\t\r\n\t\t\t// Run on checkout or cart changes\r\n\t\t\t$( document ).on( 'load_ajax_content_done', _publicMethods.init );\r\n\t\t\t$( document ).on( 'country_to_state_changed', maybeClearStateFields );\r\n\t\t}\r\n\r\n\t\t// Add body class\r\n\t\tdocument.body.classList.add( _settings.bodyClass );\r\n\r\n\t\t_hasInitialized = true;\r\n\t};\r\n\r\n\r\n\t\r\n\t//\r\n\t// Public APIs\r\n\t//\r\n\treturn _publicMethods;\r\n\r\n});\r\n"
    ],
    "names": [
        "root",
        "factory",
        "define",
        "amd",
        "exports",
        "module",
        "CheckoutValidation",
        "global",
        "this",
        "window",
        "extend",
        "extended",
        "deep",
        "i",
        "Object",
        "prototype",
        "toString",
        "call",
        "arguments",
        "length",
        "obj",
        "prop",
        "hasOwnProperty",
        "merge",
        "isAlwaysValidate",
        "field",
        "_settings",
        "alwaysValidateFieldsSelector",
        "matches",
        "$",
        "jQuery",
        "_hasInitialized",
        "_hasJQuery",
        "_publicMethods",
        "_validationTypes",
        "bodyClass",
        "formSelector",
        "formRowSelector",
        "validateFieldsSelector",
        "clearValidationCountryChangedSelector",
        "select2Selector",
        "typeRequiredSelector",
        "typeEmailSelector",
        "typeConfirmationSelector",
        "validClass",
        "invalidClass",
        "validationMessages",
        "required",
        "email",
        "confirmation",
        "isSelect2Field",
        "closest",
        "hasValue",
        "options",
        "selectedIndex",
        "value",
        "isRequiredField",
        "formRow",
        "validateRequired",
        "valid",
        "message",
        "isEmailField",
        "validateEmail",
        "RegExp",
        "test",
        "isConfirmationField",
        "querySelector",
        "validateConfirmation",
        "confirmWith",
        "form",
        "getAttribute",
        "processValidationResults",
        "validationResults",
        "validationResultsNames",
        "getOwnPropertyNames",
        "validationTypeName",
        "validationType",
        "result",
        "messageElements",
        "querySelectorAll",
        "parentNode",
        "removeChild",
        "removeInlineMessage",
        "classList",
        "toggle",
        "parent",
        "referenceNode",
        "newReference",
        "element",
        "document",
        "createElement",
        "className",
        "innerText",
        "insertBefore",
        "nextSibling",
        "maybeClearStateFields",
        "event",
        "country",
        "wrapper",
        "toArray",
        "forEach",
        "wrapperItem",
        "Array",
        "from",
        "clearValidationResults",
        "handleValidateEvent",
        "e",
        "target",
        "validateField",
        "validationTypeKeys",
        "keys",
        "type",
        "remove",
        "validateHidden",
        "getFormRow",
        "offsetParent",
        "validationTypeNames",
        "needsValidation",
        "validate",
        "validateAllFields",
        "container",
        "all_valid",
        "fields",
        "registerValidationType",
        "fnNeedsValidation",
        "fnValidate",
        "Function",
        "console",
        "log",
        "getValidationTypes",
        "init",
        "on",
        "body",
        "add"
    ],
    "mappings": "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"
}